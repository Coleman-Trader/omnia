# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Get admin NIC IP in case of dedicated
  ansible.builtin.shell: |
    set -o pipefail
    ip addr show {{ admin_nic }} | grep -Po 'inet \K[\d.]+'
  changed_when: false
  failed_when: false
  register: dedicated_nic

- name: Failed - Assign admin nic IP
  ansible.builtin.fail:
    msg: "{{ fail_admin_nic_dedicated }}"
  when: dedicated_nic.stdout == ""

- name: Fetch admin nic details
  when:
    - dedicated_nic.stdout != ""
    - dedicated_nic.stdout_lines[0] is defined
  block:
    - name: Set temp subnet admin
      ansible.builtin.set_fact:
        temp_admin_subnet1: "{{ dedicated_nic.stdout_lines[0].split('.')[0] + '.' + dedicated_nic.stdout_lines[0].split('.')[1] + '.' + '0' + '.' + '0' }}"

    - name: Assert the subnet details of admin nic
      ansible.builtin.assert:
        that:
          - temp_admin_subnet1 == admin_nic_subnet
        success_msg: "{{ success_subnet }}"
        fail_msg: "{{ fail_admin_subnet_msg }}"
      when: dedicated_nic.stdout_lines[1] is not defined

    - name: Set fact for Admin NIC IP and netmask details
      ansible.builtin.set_fact:
        admin_nic_ip: "{{ dedicated_nic.stdout }}"
        admin_nic_netmask: "{{ omnia_admin_netmask }}"
      when: temp_admin_subnet1 == admin_nic_subnet

    - name: Check admin nic when secondary ip present
      when:
        - admin_nic_ip is not defined
        - dedicated_nic.stdout_lines[1] is defined
      block:
        - name: Set temp subnet admin when secondary ip present
          ansible.builtin.set_fact:
            temp_admin_subnet2: "{{ dedicated_nic.stdout_lines[1].split('.')[0] + '.' + dedicated_nic.stdout_lines[1].split('.')[1] + '.' + '0' + '.' + '0' }}"

        - name: Set fact for Admin NIC IP and netmask details when secondary ip present
          ansible.builtin.set_fact:
            admin_nic_ip: "{{ dedicated_nic.stdout }}"
            admin_nic_netmask: "{{ omnia_admin_netmask }}"
          when: temp_admin_subnet2 == admin_nic_subnet

        - name: Assert the subnet details of admin nic when secondary ip present
          ansible.builtin.assert:
            that:
              - temp_admin_subnet2 == admin_nic_subnet
            success_msg: "{{ success_subnet }}"
            fail_msg: "{{ fail_admin_subnet_msg }}"

- name: Fail when admin nic configuration is not proper
  ansible.builtin.fail:
    msg: "{{ dedicated_nic_config_fail_msg }}"
  when:
    - dedicated_nic.stdout_lines[0] is not defined or
      admin_nic_ip is not defined
