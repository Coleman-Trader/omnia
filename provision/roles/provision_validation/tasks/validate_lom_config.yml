# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Fail if bmc nic subent is not present
  ansible.builtin.fail:
    msg: "{{ bmc_subnet_lom_fail_msg }}"
  when: bmc_nic_subnet | default("", true) | length < 7

- name: Set fact for bmc NIC IP and netmask details
  ansible.builtin.set_fact:
    bmc_nic: "{{ admin_nic }}"
    bmc_nic_netmask: "{{ omnia_bmc_netmask }}"
    admin_nic_netmask: "{{ omnia_admin_netmask }}"

- name: Get IPs in case of LOM
  ansible.builtin.shell: |
    set -o pipefail
    ip addr show {{ admin_nic }} | grep -Po 'inet \K[\d.]+'
  changed_when: false
  failed_when: false
  register: lom_nic

- name: Failed - Assign admin nic IP
  ansible.builtin.fail:
    msg: "{{ fail_admin_nic_lom }}"
  when:
    - lom_nic is defined
    - lom_nic.stdout == ""

- name: Fetch admin and bmc nic details
  when:
    - lom_nic.stdout | length != ""
    - lom_nic.stdout_lines[0] is defined
    - lom_nic.stdout_lines[1] is defined
  block:
    - name: Set temp subnet admin and bmc
      ansible.builtin.set_fact:
        temp_subnet1: "{{ lom_nic.stdout_lines[0].split('.')[0] + '.' + lom_nic.stdout_lines[0].split('.')[1] + '.' + '0' + '.' + '0' }}"
        temp_subnet2: "{{ lom_nic.stdout_lines[1].split('.')[0] + '.' + lom_nic.stdout_lines[1].split('.')[1] + '.' + '0' + '.' + '0' }}"

    - name: Set the bmc nic IP
      ansible.builtin.set_fact:
        bmc_nic_ip: "{{ lom_nic.stdout_lines[0] }}"
        admin_nic_ip: "{{ lom_nic.stdout_lines[1] }}"
      when:
        - temp_subnet1 is defined
        - temp_subnet2 is defined
        - temp_subnet1 == bmc_nic_subnet
        - temp_subnet2 == admin_nic_subnet

    - name: Set the bmc nic IP
      ansible.builtin.set_fact:
        bmc_nic_ip: "{{ lom_nic.stdout_lines[1] }}"
        admin_nic_ip: "{{ lom_nic.stdout_lines[0] }}"
      when:
        - temp_subnet1 is defined
        - temp_subnet2 is defined
        - temp_subnet1 == admin_nic_subnet
        - temp_subnet2 == bmc_nic_subnet

    - name: Assert the subnet details of admin nic
      ansible.builtin.assert:
        that:
          - temp_subnet1 == admin_nic_subnet or
            temp_subnet2 == admin_nic_subnet
        success_msg: "{{ success_subnet }}"
        fail_msg: "{{ fail_admin_subnet_msg }}"

    - name: Assert the subnet details of BMC nic
      ansible.builtin.assert:
        that:
          - temp_subnet1 == bmc_nic_subnet or
            temp_subnet2 == bmc_nic_subnet
        success_msg: "{{ success_subnet }}"
        fail_msg: "{{ fail_bmc_subnet_msg }}"

- name: Fail when admin nic configuration is not proper
  ansible.builtin.fail:
    msg: "{{ lom_admin_nic_config_fail_msg }}"
  when:
    - lom_nic.stdout_lines[0] is not defined or
      lom_nic.stdout_lines[1] is not defined or
      admin_nic_ip is not defined or
      bmc_nic_ip is not defined
