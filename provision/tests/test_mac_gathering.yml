#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
# Testcase to validate SNMP installation
- name: OMNIA_1.4_MAC_Gathering_001
  hosts: localhost
  vars_files:
    - /root/omnia/provision/tests/test_vars/test_mac_gathering_vars.yml
    - /root/omnia/input/provision_config.yml
  tasks:
    - name: Validate SNMP installation on Omnia Infrastructure Manager
      block:
        - name: Identify the presence of SNMP
          ansible.legacy.shell: 'ps -C snmpd'
          register: is_snmpd
          changed_when: false

        - name: Validate the presence of snmpd daemon
          ansible.legacy.assert:
            that:
              - '"snmpd" in is_snmpd.stdout'
            success_msg: "{{ install_snmp_success_msg }}"
            fail_msg: "{{ install_snmp_fail_msg }}"
      tags: MAC_TC_001

# Testcase to validate the presence of postgres DB table
- name: OMNIA_1.4_MAC_Gathering_002
  hosts: localhost
  vars_files:
    - /root/omnia/provision/test/test_vars/test_mac_gathering_vars.yml
    - /root/omnia/input/provision_config.yml
  tasks:
    - name: Validate the presence of node_network_details table
      block:
        - name: Identify the presence of node_network_details table
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            query: SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'omnia_cluster';
          register: table_list

        - name: Verify the presence of node_network_details table
          ansible.legacy.assert:
            that:
              - '"node_network_details" in table_list.query_result'
            success_msg: "{{ table_presence_success_msg }}"
            fail_msg: "{{ table_presence_fail_msg }}"
      tags: MAC_TC_002

# Testcase to validate the presence of all headers in DB table
- name: OMNIA_1.4_MAC_Gathering_003
  hosts: localhost
  vars_files:
    - /root/omnia/provision/tests/test_vars/test_mac_gathering_vars.yml
    - /root/omnia/input/provision_config.yml
  tasks:
    - name: Validate presence of all the column headers of DB table
      block:
        - name: Identify all column headers of network_node_details table
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            query: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'network_node_details';
          register: column_list

        - name: Write the result to a file
          ansible.legacy.shell: echo {{ item.column_name }}  >> {{ column_file_path }}
          with_items:
            - "{{ column_list.query_result }}"
          changed_when: false

        - name: Store the file input to a variable
          ansible.legacy.shell: cat {{ column_file_path }}
          register: table_cols
          changed_when: false

        - name: Remove the output file created
          ansible.legacy.file:
            path: "{{ column_file_path }}"
            state: absent

        - name: Verify the presence of node_network_details table
          ansible.legacy.assert:
            that:
              - '"{{ item }}" in table_cols.stdout'
            success_msg: "{{ item }}{{ column_presence_success_msg }}"
            fail_msg: "{{ column_presence_fail_msg }}"
          with_items:
            - "mac_address"
            - "hostname"
            - "host_ip"
            - "bmc_ip"
            - "pxe_ip"
      tags: MAC_TC_003

# Testcase to validate the presence of user defined server name pattern in hostname of DB table
- name: OMNIA_1.4_MAC_Gathering_004
  hosts: localhost
  vars_files:
    - /root/omnia/provision/tests/test_vars/test_mac_gathering_vars.yml
    - /root/omnia/input/provision_config.yml
  tasks:
    - name: Validate presence of user defined server name pattern in hostname of DB table
      block:
        - name: Pull the hostname of all servers in DB table
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            query: SELECT hostname FROM network_node_details;
          register: hostname_list

        - name: Write the result to a file
          ansible.legacy.shell: echo {{ item.hostname }}  >> {{ hostname_file_path }}
          with_items:
            - "{{ hostname_list.query_result }}"
          changed_when: false

        - name: Store the file input to a variable
          ansible.legacy.shell: cat {{ hostname_file_path }}
          register: server_hostnames
          changed_when: false

        - name: Display server hostnames
          ansible.legacy.debug:
            var: server_hostnames.stdout_lines

        - name: Remove the output file created
          ansible.legacy.file:
            path: "{{ hostname_file_path }}"
            state: absent

        - name: Verify the presence of node_network_details table
          ansible.legacy.assert:
            that:
              - '"{{ node_name_prefix }}" in server_hostnames.stdout_lines[{{ item }}]'
            success_msg: "{{ hostname_presence_success_msg }}"
            fail_msg: "{{ hostname_presence_fail_msg }}"
          with_sequence: start=0 end={{ server_hostnames.stdout_lines | length - 1 }}
      tags: MAC_TC_004

# Testcase to validate BMC, PXE and Host IPs are not empty for any server
- name: OMNIA_1.4_MAC_Gathering_005
  hosts: localhost
  vars_files:
    - /root/omnia/provision/tests/test_vars/test_mac_gathering_vars.yml
    - /root/omnia/input/provision_config.yml
  tasks:
    - name: Validate BMC, PXE and Host IPs are not empty for any server
      block:
        - name: Get total number of servers
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            query: SELECT count(*) FROM network_node_details;
          register: total_count

        - name: Print total server count
          ansible.legacy.debug:
            msg: "Total server count: {{ total_count.query_result[0].count }}"

        - name: Get total number of rows where bmc_ip is not empty
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}""
            login_password: "{{ postgres_password }}"
            query: select count(*) from (select bmc_ip from network_node_details where bmc_ip != '') as bmc_count;
          register: bmc_ip_count

        - name: Print server count where BMC IP is not empty
          ansible.legacy.debug:
            msg: "Server count where BMC IP is not empty: {{ bmc_ip_count.query_result[0].count }}"

        - name: Get total number of rows where pxe_ip is not empty
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            query: select count(*) from (select pxe_ip from network_node_details where pxe_ip != '') as pxe_count;
          register: pxe_ip_count

        - name: Print server count where PXE IP is not empty
          ansible.legacy.debug:
            msg: "Server count where PXE IP is not empty: {{ pxe_ip_count.query_result[0].count }}"

        - name: Get total number of rows where pxe_ip is not empty
          postgresql_query:
            db: "{{ omnia_db }}"
            login_user: "{{ postgres_user }}"
            login_password: "{{ postgres_password }}"
            query: select count(*) from (select host_ip from network_node_details where host_ip != '') as host_count;
          register: host_ip_count

        - name: Print server count where host IP is not empty
          ansible.legacy.debug:
            msg: "Server count where host IP is not empty: {{ host_ip_count.query_result[0].count }}"

        - name: Validate BMC, PXE and host IPs not being empty for servers
          ansible.legacy.assert:
            that:
              - '{{ bmc_ip_count.query_result[0].count | int }} == {{ total_count.query_result[0].count | int }}'
              - '{{ pxe_ip_count.query_result[0].count | int }} == {{ total_count.query_result[0].count | int }}'
              - '{{ host_ip_count.query_result[0].count | int }} == {{ total_count.query_result[0].count | int }}'
            success_msg: "{{ server_ips_not_missing_msg }}"
            fail_msg: "{{ server_ips_missing_msg }}"
      tags: MAC_TC_005
