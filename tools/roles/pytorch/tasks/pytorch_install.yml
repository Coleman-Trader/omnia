#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---


- name: Install pytorch (CPU)
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ oim_hostname }},{{ admin_nic_ip }}"
  when: processing_unit == "cpu"
  block:
    - name: Validate pytorch_cpu_image_package and pytorch_cpu_image_version
      ansible.builtin.assert:
        that:
          - pytorch_cpu_image_package is defined
          - pytorch_cpu_image_version is defined
        fail_msg: "{{ pytorch_cpu_definition_fail_msg }}"

    - name: Set pytorch_cpu_image
      ansible.builtin.set_fact:
        pytorch_cpu_image: "{{ pytorch_cpu_image_package }}:{{ pytorch_cpu_image_version }}"

    - name: Pull CPU container image
      ansible.builtin.command: "nerdctl pull {{ pytorch_cpu_image }}"
      changed_when: false
      failed_when: false
      register: cpu_deployment_output

    - name: Failed to pull cpu container
      ansible.builtin.debug:
        msg: "Warning: {{ error_pull_container }}"
      when: cpu_deployment_output.rc != 0

    - name: Updating pytorch installation_status (CPU)
      ansible.builtin.set_fact:
        installation_status: "{{ installation_failed_status }}: {{ error_pull_container }}"
      when: cpu_deployment_output.rc != 0

- name: Install pytorch (AMD)
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ oim_hostname }},{{ admin_nic_ip }}"
  when: processing_unit == "amd"
  block:
    - name: Pull AMD GPU container image
      ansible.builtin.command: "nerdctl pull {{ pytorch_amd_image }}"
      changed_when: false
      failed_when: false
      register: amd_deployment_output

    - name: Failed to pull AMD GPU container
      ansible.builtin.debug:
        msg: "Warning: {{ error_pull_container }}"
      when: amd_deployment_output.rc != 0

    - name: Updating pytorch installation_status (AMD)
      ansible.builtin.set_fact:
        installation_status: "{{ installation_failed_status }}: {{ error_pull_container }}"
      when: amd_deployment_output.rc != 0

- name: Install pytorch (NVIDIA)
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ oim_hostname }},{{ admin_nic_ip }}"
  when: processing_unit == "nvidia"
  block:
    - name: Validate pytorch_nvidia_image_package and pytorch_nvidia_image_version
      ansible.builtin.assert:
        that:
          - pytorch_nvidia_image_package is defined
          - pytorch_nvidia_image_version is defined
        fail_msg: "{{ pytorch_nvidia_definition_fail_msg }}"

    - name: Set pytorch_nvidia_image
      ansible.builtin.set_fact:
        pytorch_nvidia_image: "{{ pytorch_nvidia_image_package }}:{{ pytorch_nvidia_image_version }}"

    - name: Pull NVIDIA GPU container image
      ansible.builtin.command: "nerdctl pull {{ pytorch_nvidia_image }}"
      changed_when: false
      failed_when: false
      register: nvidia_deployment_output

    - name: Failed to pull NVIDIA GPU container
      ansible.builtin.debug:
        msg: "Warning: {{ error_pull_container }}"
      when: nvidia_deployment_output.rc != 0

    - name: Updating pytorch installation_status (NVIDIA)
      ansible.builtin.set_fact:
        installation_status: "{{ installation_failed_status }}: {{ error_pull_container }}"
      when: nvidia_deployment_output.rc != 0

- name: Install pytorch (GAUDI)
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ oim_hostname }},{{ admin_nic_ip }}"
  when: processing_unit == "gaudi"
  block:
    - name: Validate pytorch_gaudi_image_package and pytorch_gaudi_image_version
      ansible.builtin.assert:
        that:
          - pytorch_gaudi_image_package is defined
          - pytorch_gaudi_image_version is defined
        fail_msg: "{{ pytorch_gaudi_definition_fail_msg }}"

    - name: Set pytorch_gaudi_image
      ansible.builtin.set_fact:
        pytorch_gaudi_image: "{{ pytorch_gaudi_image_package }}:{{ pytorch_gaudi_image_version }}"

    - name: Pull GAUDI HPU container image
      ansible.builtin.command: "nerdctl pull {{ pytorch_gaudi_image }}"
      changed_when: false
      failed_when: false
      register: gaudi_deployment_output

    - name: Failed to pull GAUDI HPU container
      ansible.builtin.debug:
        msg: "Warning: {{ error_pull_container }}"
      when: gaudi_deployment_output.rc != 0

    - name: Updating pytorch installation_status (GAUDI)
      ansible.builtin.set_fact:
        installation_status: "{{ installation_failed_status }}: {{ error_pull_container }}"
      when: gaudi_deployment_output.rc != 0

- name: Modify pytorch_installation_status
  ansible.builtin.set_fact:
    pytorch_installation_status: true
  when: installation_status == installation_success_status
