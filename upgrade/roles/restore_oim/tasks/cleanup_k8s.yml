#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set oim_os
  ansible.builtin.set_fact:
    oim_os: "{{ ansible_distribution | lower }}"

- name: Reset kubeadm
  ansible.builtin.command: kubeadm reset --cri-socket={{ crio_socket }} -f
  changed_when: false
  failed_when: false

- name: Stop kubelet service
  ansible.builtin.service:
    name: kubelet
    state: stopped
  failed_when: false

- name: Remove kubelet service
  ansible.builtin.file:
    path: "/etc/systemd/system/kubelet.service"
    state: absent
  failed_when: false

- name: Stop etcd service
  ansible.builtin.service:
    name: etcd
    state: stopped
  failed_when: false

- name: Remove etcd service
  ansible.builtin.file:
    path: "/etc/systemd/system/etcd.service"
    state: absent
  failed_when: false

- name: Check if crictl is present
  ansible.builtin.stat:
    path: "{{ bin_dir }}/crictl"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: crictl

- name: Stop all cri containers
  ansible.builtin.shell: "set -o pipefail && {{ bin_dir }}/crictl ps -q | xargs -r {{ bin_dir }}/crictl -t 60s stop -t {{ grace_period }}"
  args:
    executable: /bin/bash
  register: remove_all_cri_containers
  retries: 5
  until: remove_all_cri_containers.rc == 0
  delay: 5
  when:
    - crictl.stat.exists
  failed_when: false
  changed_when: true

- name: Force remove all cri containers
  ansible.builtin.command: "{{ bin_dir }}/crictl rm -a -f"
  register: remove_all_cri_containers
  retries: 5
  until: remove_all_cri_containers.rc == 0
  delay: 5
  when:
    - crictl.stat.exists
  failed_when: false
  changed_when: true

- name: Stop all cri pods
  ansible.builtin.shell: "set -o pipefail && {{ bin_dir }}/crictl pods -q | xargs -r {{ bin_dir }}/crictl -t 60s stop"
  args:
    executable: /bin/bash
  register: remove_all_cri_containers
  retries: 5
  until: remove_all_cri_containers.rc == 0
  delay: 5
  when:
    - crictl.stat.exists
  failed_when: false
  changed_when: true

- name: Remove all cri pods
  block:
    - name: Force remove all cri pods
      ansible.builtin.command: "{{ bin_dir }}/crictl rmp -a -f"
      register: remove_all_cri_containers
      retries: 5
      until: remove_all_cri_containers.rc == 0
      delay: 5
      when:
        - crictl.stat.exists
      failed_when: false
      changed_when: true

  rescue:
    - name: Force remove all cri pods (rescue)
      ansible.builtin.shell: "set -o pipefail && ip netns list | cut -d' ' -f 1 | xargs -n1 ip netns delete && {{ bin_dir }}/crictl rmp -a -f"
      failed_when: false
      changed_when: true

- name: Remove kubernetes folder
  ansible.builtin.file:
    path: "{{ kube_folder_path }}"
    state: absent

- name: Remove runc package
  ansible.builtin.package:
    name: runc
    state: absent
  failed_when: false

- name: Remove metallb data
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ metallb_files }}"

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true
  changed_when: false
  failed_when: false

- name: Remove k8s bin file
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ k8s_bin_files }}"
  failed_when: false

- name: Remove k8s config file
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ k8s_del_files }}"
  failed_when: false

- name: Free Omnia Infrastructure Manager k8s by killing related processes
  block:
    - name: Check for Kubernetes-related processes occupying ports
      ansible.builtin.shell: >
        set -o pipefail && \
        netstat -tulpn | grep 'kube'
      register: kube_processes
      changed_when: false
      failed_when: false

    - name: Extract PIDs of Kubernetes processes using ports
      ansible.builtin.set_fact:
        kube_pids: "{{ kube_processes.stdout_lines | map('regex_search', '\\s(\\d+)/', '\\1') | flatten }}"
      when: kube_processes.stdout_lines | default("", true) | length > 1
      failed_when: false

    - name: Kill Kubernetes processes to free the ports
      ansible.builtin.command: "kill -9 {{ item }}"
      with_items: "{{ kube_pids }}"
      when: kube_pids | default("", true) | length > 1
      changed_when: false
      failed_when: false
