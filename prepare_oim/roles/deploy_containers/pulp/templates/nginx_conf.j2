# TODO: Support IPv6.
# TODO: Maybe serve multiple `location`s, not just one.

# The "nginx" package on fedora creates this user and group.
user nginx nginx;
# Gunicorn docs suggest this value.
worker_processes {{ nginx_template_vars.worker_processes }};
daemon off;
events {
    worker_connections {{ nginx_template_vars.worker_connections }};  # increase if you have lots of clients
    accept_mutex {{ nginx_template_vars.accept_mutex }};  # set to 'on' if nginx worker_processes > 1
}

http {
    include mime.types;
    # fallback in case we can't determine a type
    default_type application/octet-stream;
    sendfile on;

    # If left at the default of 1024, nginx emits a warning about being unable
    # to build optimal hash types.
    types_hash_max_size {{ nginx_template_vars.types_hash_max_size }};

    upstream pulp-content {
         server {{ nginx_template_vars.server_content_ip }}:{{ nginx_template_vars.pulp_content_port }};
    }

    upstream pulp-api {
         server {{ nginx_template_vars.server_api_ip }}:{{ nginx_template_vars.pulp_api_port }};
    }

    server {
        # Gunicorn docs suggest the use of the "deferred" directive on Linux.
        listen {{ pulp_container_port_https }} ssl deferred;

        # SSL certificates
        ssl_certificate {{ nginx_template_vars.pulp_server_crt_path }};
        ssl_certificate_key {{ nginx_template_vars.pulp_server_key_path }};
        # listen {{ nginx_template_vars.http_port }} default_server deferred;
        server_name {{ pulp_server_ip }};

        # The default client_max_body_size is 1m. Clients uploading
        # files larger than this will need to chunk said files.
        client_max_body_size {{ nginx_template_vars.client_max_body_size }};

        # Gunicorn docs suggest this value.
        keepalive_timeout {{ nginx_template_vars.keepalive_timeout }};

        location /pulp/content/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://pulp-content;
        }

        location /pulp/api/v3/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://pulp-api;
            client_max_body_size 0;
        }

        location /auth/login/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://pulp-api;
        }

        include pulp/*.conf;

        location /static/pulp_ui/ {
            root /var/lib/operator/;
            try_files $uri /static/pulp_ui/index.html;
        }
        location /ui/ {
            alias /var/lib/operator/static/pulp_ui/;
            try_files $uri /static/pulp_ui/index.html;
        }
        location /pulp-ui-config.json {
            root /var/lib/operator/static/pulp_ui/;
        }

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://pulp-api;
            # most pulp static files are served through whitenoise
            # http://whitenoise.evans.io/en/stable/
        }
    }
    server {
        listen {{ nginx_template_vars.http_port }};
        server_name {{ pulp_server_ip }};

        # Redirect HTTP to HTTPS
        return 301 https://{{ pulp_server_ip }}:{{ pulp_container_port_https }}$request_uri;
    }
}
