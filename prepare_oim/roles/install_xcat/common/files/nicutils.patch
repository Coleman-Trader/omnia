--- nicutils.sh	2024-12-18 17:57:09.353695583 +0000
+++ updated_nicutils.sh	2024-12-18 19:15:17.711244162 +0000
@@ -1627,7 +1627,12 @@
         log_info "networking service is active"
         return 0
     fi
-    log_error "NetworkManager, network.service and networking service are not active"
+    checkservicestatus systemd-networkd > /dev/null 2>/dev/null
+    if [ $? -eq 0 ]; then
+        log_info "systemd-networkd service is active"
+        return 0
+    fi
+    log_error "NetworkManager, network.service, networking and systemd-networkd service are not active"
     return 2
 }
 
@@ -2348,7 +2353,7 @@
 ######################################################################
 #
 # delete bond slaves connection
-# imput format: <slave1> <slave2> <slave3> ... ...<slaven>
+# input format: <slave1> <slave2> <slave3> ... ...<slaven>
 #
 ######################################################################
 function delete_bond_slaves_con {
@@ -2365,3 +2370,130 @@
         fi
     done
 }
+##################################################################
+#
+# Calculate the netmask bits from netmask
+# Input format: netmask
+#
+###################################################################
+function calculate_netmask_bits {
+    netmask_bits=0
+    for octet in $(echo $1| sed 's/\./ /g'); do
+        binbits=$(echo "obase=2; ibase=10; ${octet}"| bc | sed 's/0//g')
+        netmask_bits=$(expr $netmask_bits + ${#binbits})
+    done
+    return $netmask_bits
+}
+###############################################################################
+#
+# create vlan
+#
+# input : ifname=<ifname> slave_ports=<ports> xcatnet=<xcatnetwork> _ipaddr=<ip> _netmask=<netmask> _mtu=<mtu> _bridge=<bridge_name> vlanid=<vlanid>
+# return : 0 success
+#
+###############################################################################
+function create_vlan_interface_netplan {
+    log_info "create_vlan_interface_netplan $@"
+
+    local ifname=""
+    local vlanid=""
+    local ipaddrs=""
+    local _ipaddrs=""
+    local _xcatnet=""
+    local _netmask=""
+    local _mtu=""
+    local next_nic=""
+    rc=0
+    # in case it's on top of bond, we need to migrate ip from its
+    # member vlan ports.
+    # parser input arguments
+    while [ -n "$1" ];
+    do
+        key=`echo "$1" | $cut -s -d= -f1`
+        if [ "$key" = "ifname" ] || \
+           [ "$key" = "ipaddrs" ] || \
+           [ "$key" = "next_nic" ] || \
+           [ "$key" = "vlanid" ]; then
+            eval "$1"
+        fi
+        shift
+    done
+
+    if [ -z "$vlanid" ]; then
+        log_error "No \"vlanid\" specificd for vlan interface. Abort!"
+        return 1
+    fi
+    if [ -z "$next_nic" ]; then
+        _xcatnet=$(query_nicnetworks_net $ifname.$vlanid)
+        log_info "Pickup xcatnet, \"$_xcatnet\", from NICNETWORKS for interface \"$ifname\"."
+
+        _mtu=$(get_network_attr $_xcatnet mtu)
+
+        if [ ! -z "$ipaddrs" ]; then
+            _netmask_long=$(get_network_attr $_xcatnet mask)
+            if [ $? -ne 0 ]; then
+                log_error "No valid netmask get for $ifname.$vlanid"
+                return 1
+            else
+                ipaddr=$(get_first_addr_ipv4 $ipaddrs)
+                if [ $? -ne 0 ]; then
+                    log_error "No valid IP address get for $ifname.$vlanid, please check $ipaddrs"
+                    return 1
+                fi
+                _netmask=$(v4mask2prefix $_netmask_long)
+                _ipaddrs="ip4 $ipaddr/$_netmask"
+            fi
+        fi
+    fi
+
+    #query extra params to configure gateway and routes
+    query_extra_params $ifname.$vlanid
+
+    #load the 8021q module if not loaded.
+    load_kmod module=8021q retry=10 interval=0.5
+
+    str_conf_file=/etc/netplan/$ifname.$vlanid.yaml
+    rm -rf $str_conf_file
+
+    # Updating configuration netplan file for vlan
+    echo "network:"  >> $str_conf_file
+    echo "  version: 2" >> $str_conf_file
+    echo "  ethernets:" >> $str_conf_file
+    echo "    $ifname:"  >> $str_conf_file
+    echo "      dhcp4: true" >> $str_conf_file
+    echo "  vlans:" >> $str_conf_file
+    echo "    $ifname.$vlanid:"  >> $str_conf_file
+    echo "      id: $vlanid" >> $str_conf_file
+    echo "      link: $ifname" >> $str_conf_file
+    echo "      addresses:"  >> $str_conf_file
+    echo "      - ${ipaddrs}/${_netmask}" >> $str_conf_file
+    echo "      dhcp4: false" >> $str_conf_file
+
+    # Configuring mtu if not empty
+    if [ -n "${_mtu}" ];then
+      echo "      mtu: ${_mtu}"  >> $str_conf_file
+    fi
+
+    if [ -n "$str_extra_params" ];then
+        IFS='-' read -r metric gateway <<< "$str_extra_params"
+        if [ -n "$metric" ] && [ -n "$gateway" ]; then
+            echo "      routes:" >> $str_conf_file
+            echo "      - metric: ${metric}"  >> $str_conf_file
+            echo "        to: "0.0.0.0/0"" >> $str_conf_file
+            echo "        via: ${gateway}" >> $str_conf_file
+            echo "      routing-policy:" >> $str_conf_file
+            echo "      - table: ${metric}" >> $str_conf_file
+            echo "        from: ${ipaddrs}" >> $str_conf_file
+        fi
+    fi
+
+    chmod 600 $str_conf_file
+    netplan apply
+    rc=$?
+    sleep 1
+
+    $ip address show dev $ifname.$vlanid | $sed -e 's/^/[vlan] >> /g' | log_lines info
+    return $rc
+
+}
+
