# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Check selinux status
  when:
    - oim_os in oim_os_redhat or
      oim_os in oim_os_rocky
  block:
    - name: Fetch selinux mode
      ansible.builtin.command: sestatus
      register: sestatus_current
      changed_when: false

    - name: Disable selinux
      ansible.builtin.replace:
        path: /etc/sysconfig/selinux
        regexp: 'SELINUX=[a-z]+'
        replace: 'SELINUX=disabled'
      when: '"SELinux status:                 enabled" in sestatus_current.stdout_lines'

    - name: Status of selinux
      ansible.builtin.fail:
        msg: "{{ selinux_status_fail_msg }}"
      when: '"SELinux status:                 enabled" in sestatus_current.stdout_lines'

- name: Initialize variables
  ansible.builtin.set_fact:
    xcat_installation_status: false
    validation_status: true

- name: Gathering service facts
  ansible.builtin.service_facts:

- name: Fetch network table entries
  ansible.builtin.command: "{{ xcat_path }}/lsdef -t network"
  changed_when: false
  failed_when: false
  register: fetch_network

- name: Try restart postgresql service if not running in Ubuntu
  when:
    - oim_os == oim_os_ubuntu
    - fetch_network.rc != 0
  block:
    - name: Try restart postgresql service if not running in Ubuntu
      ansible.builtin.systemd:
        name: "{{ postgresql_service_ubuntu }}"
        state: restarted
      register: postgresql_restart
      until: postgresql_restart is not failed
      retries: "{{ service_retries }}"
      when:
        - postgresql_service_ubuntu in ansible_facts.services
  rescue:
    - name: Unable to start postgresql services
      ansible.builtin.debug:
        msg: "{{ postgresql_start_fail_msg }}"

- name: Try restart postgresql service if not running in RHEL/Rocky
  when:
    - oim_os == oim_os_redhat or oim_os == oim_os_rocky
    - fetch_network.rc != 0
  block:
    - name: Try restart postgresql service if not running in RHEL/Rocky
      ansible.builtin.systemd:
        name: "{{ postgresql_service_rhel }}"
        state: restarted
      register: postgresql_restart
      until: postgresql_restart is not failed
      retries: "{{ service_retries }}"
      when:
        - postgresql_service_rhel in ansible_facts.services
  rescue:
    - name: Unable to start postgresql services
      ansible.builtin.debug:
        msg: "{{ postgresql_start_fail_msg }}"

- name: Try restart xcatd service if not running
  block:
    - name: Try restart xcatd service if not running
      ansible.builtin.systemd:
        name: xcatd
        state: restarted
      register: xcatd_restart
      until: xcatd_restart is not failed
      retries: "{{ service_retries }}"
      when:
        - xcatd_service in ansible_facts.services
        - "'running' not in ansible_facts.services[xcatd_service].state"
  rescue:
    - name: Unable to start xcatd services
      ansible.builtin.debug:
        msg: "{{ xcat_start_fail_msg }}"

- name: Gathering service facts
  ansible.builtin.service_facts:

- name: Fetch network table entries
  ansible.builtin.command: "{{ xcat_path }}/lsdef -t network"
  changed_when: false
  failed_when: false
  register: fetch_network

- name: Set xcat_installation_status to true for RHEL/Rocky
  ansible.builtin.set_fact:
    xcat_installation_status: true
  when:
    - oim_os == oim_os_redhat or oim_os == oim_os_rocky
    - xcatd_service in ansible_facts.services
    - postgresql_service_rhel in ansible_facts.services
    - "'running' in ansible_facts.services[xcatd_service].state"
    - "'running' in ansible_facts.services[postgresql_service_rhel].state"
    - fetch_network.rc == 0

- name: Set xcat_installation_status to true for Ubuntu
  ansible.builtin.set_fact:
    xcat_installation_status: true
  when:
    - oim_os == oim_os_ubuntu
    - xcatd_service in ansible_facts.services
    - postgresql_service_ubuntu in ansible_facts.services
    - "'running' in ansible_facts.services[xcatd_service].state"
    - "'running' in ansible_facts.services[postgresql_service_ubuntu].state"
    - fetch_network.rc == 0
