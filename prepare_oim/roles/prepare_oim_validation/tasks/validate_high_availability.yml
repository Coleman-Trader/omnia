# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

---

- name: Validate high availability configuration
  block:
    - name: Run high availability configuration schema validation
      ansible.builtin.command:
        cmd: "ansible-playbook validate_config.yml --extra-vars 'files=high_availability_config.yml'"
      args:
        chdir: "/opt/omnia/input_validation"
      register: validation_result
      changed_when: false
      delegate_to: localhost
      failed_when: validation_result.rc != 0
      no_log: true

    - name: Show validation success
      ansible.builtin.debug:
        msg: "high availability configuration validation successful"
      when: validation_result.rc == 0
  rescue:
    - name: High availability configuration input validation failed
      ansible.builtin.fail:
        msg: "{{ validation_result.stdout | regex_search('FAILED! => {[^}]+}') }}"

- name: Include high_availability_config.yml
  block:
    - name: Include high_availability_config.yml
      ansible.builtin.include_vars: "{{ high_availability_config_path }}"
      register: high_availability_config
      tags: init
  rescue:
    - name: Failed to include high_availability_config.yml
      ansible.builtin.fail:
        msg: "{{ high_availability_config_syntax_fail_msg }} Error: {{ high_availability_config.message }}"

- name: Parse high_availability_config data
  ansible.builtin.set_fact:
    oim_ha_data: "{{ high_availability_config | default({}) | combine({item.key: item.value}) }}"
  with_dict: "{{ oim_ha }}"

- name: Set high_availability_status
  ansible.builtin.set_fact:
    enable_oim_ha: "{{ high_availability_config.ansible_facts.oim_ha.enable_oim_ha | default(false) }}"

- name: Include metadata vars
  ansible.builtin.include_vars: "{{ omnia_metadata_file }}"
  register: include_metadata
  no_log: true

- name: Set omnia_share_option from metadata
  ansible.builtin.set_fact:
    omnia_share_option: "{{ include_metadata.ansible_facts.omnia_share_option }}"

- name: Validate NFS requirement for HA
  ansible.builtin.fail:
    msg: "NFS share is required for OIM High Availability. Current share option is: {{ omnia_share_option }}"
  when:
    - enable_oim_ha | bool
    - omnia_share_option != "NFS"

- name: Set vip_status
  ansible.builtin.set_fact:
    vip_status: >-
      {{
        oim_ha_data.ansible_facts.oim_ha.virtual_ip_address is defined and
        oim_ha_data.ansible_facts.oim_ha.virtual_ip_address | length > 1 | default(false)
      }}
