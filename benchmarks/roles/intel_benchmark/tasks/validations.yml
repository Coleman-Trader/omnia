#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialize variables
  ansible.builtin.set_fact:
    xcat_installation_status: false
    supported_os_version_status: false

- name: Invalid inventory format
  ansible.builtin.fail:
    msg: "{{ invalid_inventory_fail_msg }}"
  when: groups['manager'] is not defined or groups['compute'] is not defined

- name: Gathering service facts
  ansible.builtin.service_facts:

- name: Set xcat_installation_status to true
  ansible.builtin.set_fact:
    xcat_installation_status: true
  when:
    - "'xcatd.service' in ansible_facts.services"
    - "'postgresql.service' in ansible_facts.services"
    - "'running' in ansible_facts.services['xcatd.service'].state"
    - "'running' in ansible_facts.services['postgresql.service'].state"

- name: Fail if xcat is not running
  ansible.builtin.fail:
    msg: "{{ xcat_running_fail_msg }}"
  when: not xcat_installation_status

- name: Assert operating system
  ansible.builtin.assert:
    that:
      - provision_os | lower == os_supported_rhel or
        provision_os | lower == os_supported_rocky
    success_msg: "{{ provision_os_success_msg }}"
    fail_msg: "{{ provision_os_fail_msg }}"

- name: Set supported_os_version_status to true
  ansible.builtin.set_fact:
    supported_os_version_status: true
  with_items: "{{ supported_rhel_os_version }}"
  when: provision_os_version | string in item

- name: Validate provision_os_version is supported
  ansible.builtin.fail:
    msg: "{{ provision_os_version_fail_msg }}"
  when: not supported_os_version_status
