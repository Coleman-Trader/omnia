# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Initialize variables
  ansible.builtin.set_fact:
    diskful_osimage_status: false

- name: Check diskful osimage is created
  ansible.builtin.shell: >
    set -o pipefail && \
    {{ xcat_path }}/lsdef -t osimage | grep "{{ osimage_search_key }}" | grep "{{ provision_os }}" | grep "{{ provision_os_version }}"
  changed_when: false
  failed_when: false
  register: diskful_osimage_check

- name: Set diskful_osimage_status to true
  ansible.builtin.set_fact:
    diskful_osimage_status: true
  when:
    - provision_os in diskful_osimage_check.stdout
    - provision_os_version in diskful_osimage_check.stdout

- name: Create diskful osimage locally
  ansible.builtin.command: "{{ xcat_sbin_path }}/copycds {{ iso_file_path }}"
  changed_when: true
  when: not nfs_used

- name: Create diskful osimage on NFS
  when: nfs_used
  block:
    - name: Get iso architecture
      ansible.builtin.shell: >
        set -o pipefail && \
        ls {{ iso_file_path }} | grep "x86_64"
      changed_when: false
      failed_when: false
      register: iso_architecture

    - name: Set iso architecture to x86
      ansible.builtin.set_fact:
        iso_architecture: x86_64
      when:
        - iso_architecture is defined

    - name: Set iso architecture to ARM
      ansible.builtin.set_fact:
        iso_architecture: ARM
      when:
        - iso_architecture is not defined
    
    - name: Set OS image name
      vars:
        os_image_prefixes:
          rhel: rhels
      set_fact:
        iso_image_name: "{{ os_image_prefixes[provision_os] }}{{ provision_os_version }}.0"

    - name: Set OS architecture tmp directory
      ansible.builtin.set_fact:
        tmp_dir_osimage: "{{ tmp_dir }}/{{ iso_image_name }}/{{ iso_architecture }}"

    - name: Create tmp osimage directory
      ansible.builtin.file:
        path: "{{ tmp_dir_osimage }}"
        state: directory
        mode: "{{ mode }}"

    - name: Create diskful osimage
      ansible.builtin.command: "{{ xcat_sbin_path }}/copycds -p {{ tmp_dir_osimage }} {{ iso_file_path }}"
      changed_when: true

    - name: Copy osimages to xCAT install directory
      ansible.builtin.copy:
        src: "{{ tmp_dir }}/"
        dest: "{{ xcat_install_dir }}"
        remote_src: true
        mode: "{{ mode }}"

    - name: Delete tmp osimage directory
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: absent

    - name: Set osimage pkgdir
      ansible.builtin.set_fact:
        xcat_install_dir: "{{ xcat_install_dir }}/{{ iso_image_name }}/{{ iso_architecture }}"

    - name: Get compute osimage name
      ansible.builtin.shell: >
        set -o pipefail && \
        {{ xcat_path }}/lsdef -t osimage | grep "{{ osimage_search_key }}" | grep "{{ provision_os }}" | grep "{{ provision_os_version }}" | cut -d' ' -f1
      changed_when: false
      register: fetch_osimage

    - name: Modify osimages to xCAT install directory
      ansible.builtin.command: "{{ xcat_path }}/chdef -t osimage {{ fetch_osimage.stdout }} pkgdir={{ xcat_install_dir }}"
      changed_when: true
      when: fetch_osimage.stdout is defined

    - name: Get service osimage name
      ansible.builtin.shell: >
        set -o pipefail && \
        {{ xcat_path }}/lsdef -t osimage | grep "{{ service_osimage_search_key }}" | grep "{{ provision_os }}" \
        | grep "{{ provision_os_version }}" | cut -d' ' -f1
      changed_when: false
      register: fetch_osimage

    - name: Modify osimages to xCAT install directory
      ansible.builtin.command: "{{ xcat_path }}/chdef -t osimage {{ fetch_osimage.stdout }} pkgdir={{ xcat_install_dir }}"
      changed_when: true
      when: fetch_osimage.stdout is defined
