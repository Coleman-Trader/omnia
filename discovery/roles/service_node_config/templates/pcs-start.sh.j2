systemctl start corosync
systemctl start pacemaker
# Check if corosync and pacemaker have started
if ! systemctl status corosync > /dev/null; then
    echo "Corosync has not started. Exiting with return code 1."
    exit 1
fi
if ! systemctl status pacemaker > /dev/null; then
    echo "Pacemaker has not started. Exiting with return code 1."
    exit 1
fi
echo "Corosync and Pacemaker have started. Continuing with the script."
pcs property set stonith-enabled=false
pcs property set no-quorum-policy=ignore
pcs resource defaults update migration-threshold={{ sn_ha_migration_threshold }}

# Create xcatd-check resource
pcs resource create XCATD-CHECK ocf:heartbeat:xcatd-remote-check \
  op monitor interval={{ monitor_interval }} timeout=10s on-fail=restart \
  op start timeout=10s on-fail=restart \
  op stop timeout=30s on-fail=block

pcs resource group add {{ pcs_group }}  XCATD-CHECK

# Constrain preferred active node
{% if active_node is defined %}
# Add a Service Node Virtual IP (VIP) resource
pcs resource create SNVIP IPaddr2 ip={{ active_node.virtual_ip }} cidr_netmask={{ network_data.admin_network.netmask_bits }} \
  op monitor interval={{ monitor_interval }}
pcs resource group add {{ pcs_group }} xcatd-check
# Group xcatd-check and vip together

pcs constraint location {{ pcs_group }} prefers {{ active_node.hostname }}=200
{% endif %}

{% if passive_nodes is defined %}
{% for node in passive_nodes %}
pcs constraint location {{ pcs_group }} prefers {{ node.hostname }}=100
{% endfor %}
{% endif %}

# Stickiness to avoid unnecessary failover
pcs resource defaults resource-stickiness=100
# Enable on boot
pcs cluster enable --all
echo -e "\n PCS Resource Setup completed for Servicenode HA. Current resource status:\n"
pcs status resources