# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# # 1. Create map of node_service_tag to node info
# - name: Create map of node_service_tag to full node info
#   set_fact:
#     node_info_map: >-
#       {{
#         dict(service_nodes.query_result | map(attribute='service_tag') | zip(service_nodes.query_result))
#       }}

# - name: Debug node_info_map to verify data structure
#   debug:
#     msg: "{{ node_info_map }}"

- name: Create directories for each service tag 
  ansible.builtin.file:
    path: "{{ service_node_dir }}"
    state: directory
    mode: "{{ file_permissions }}"
  loop: "{{ service_nodes.query_result }}"
  loop_control:
    label: "{{ item.service_tag }}"

# # 3. Debug service_admin_nic_ip
# - name: Debug service_admin_nic_ip
#   debug:
#     msg: "{{ service_admin_nic_ip }}"
#   loop: "{{ service_nodes.query_result }}"
#   loop_control::
#     loop_var: node
#   vars:
#     service_admin_nic_ip: "{{ node.admin_ip }}"

- name: Render corosync.conf for non-HA nodes
  loop: "{{ service_nodes.query_result }}"
  loop_control:
    loop_var: node
  when: node.service_tag not in service_node_ha_data.service_nodes | map(attribute='active_node_service_tag') | list
  ansible.builtin.template:
    src: "{{ corosync_non_ha_tmpl }}"
    dest: "{{ service_node_base_dir }}/{{ node.service_tag }}/corosync.conf"

- name: Generate {{ pcs_container_name }}.container for non-HA nodes
  template:
    src: "{{ pcs_container_tmpl }}"
    dest: "{{ pcs_container_tmpl_nonha_dest }}"
  loop: "{{ service_nodes.query_result }}"
  loop_control:
    loop_var: node
  when: node.service_tag not in service_node_ha_data.service_nodes | map(attribute='active_node_service_tag') | list
  vars:
    node_info: "{{ node }}"  

- name: Generate pcs-start.sh for non-HA nodes
  template:
    src: "{{ pcs_start_tmpl }}"
    dest: "{{ pcs_start_tmpl_nonha_dest }}"
    mode: "{{ file_permissions }}"
  loop: "{{ service_nodes.query_result }}"
  loop_control:
    loop_var: node
  when: node.service_tag not in service_node_ha_data.service_nodes | map(attribute='active_node_service_tag') | list
  vars:
    item: "{{ node }}"  

