# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialize default variables
  ansible.builtin.set_fact:
    cuda_input_status: false
    cuda_config_status: false
    cuda_input_url_status: false
    cuda_input_path_status: false
    ofed_input_status: false
    ofed_config_status: false
    ofed_input_url_status: false
    ofed_input_path_status: false

- name: Set cuda_input_status and ofed_input_status
  ansible.builtin.set_fact:
    cuda_input_status: "{{ software_config.softwares | selectattr('name', 'equalto', 'cuda') | list | length > 0 }}"
    ofed_input_status: "{{ software_config.softwares | selectattr('name', 'equalto', 'ofed') | list | length > 0 }}"

- name: Check cuda json status
  when: cuda_input_status
  block:
    - name: Check that the software_config.json exists
      ansible.builtin.stat:
        path: "{{ cuda_json_file }}"
      register: cuda_stat_result

    - name: Fail if cuda.json file doesn't exist
      ansible.builtin.fail:
        msg: "{{ fail_msg_cuda_json_file }}"
      when: not cuda_stat_result.stat.exists

    - name: Validate cuda.json
      when: cuda_stat_result.stat.exists
      block:
        - name: Load cuda.json
          ansible.builtin.include_vars:
            file: "{{ cuda_json_file }}"
            name: cuda_config

        - name: Set cuda_input_url_status
          ansible.builtin.set_fact:
            cuda_input_url_status: true
          when:
            - cuda_config.cuda.cluster[0].url is defined
            - cuda_config.cuda.cluster[0].url | trim | length > 1

        - name: Set cuda_input_path_status
          ansible.builtin.set_fact:
            cuda_input_path_status: true
          when:
            - cuda_config.cuda.cluster[0].path is defined
            - cuda_config.cuda.cluster[0].path | trim | length > 1

        - name: Check if url or path is defined in cluster variable
          ansible.builtin.set_fact:
            cuda_config_status: true
          when: cuda_input_url_status or cuda_input_path_status

        - name: Fail if neither url nor path is not provided for cuda.json file
          ansible.builtin.fail:
            msg: "{{ fail_msg_cuda_config }}"
          when: not cuda_config_status

        - name: Verify the cuda file path provided
          when: cuda_input_path_status
          block:
            - name: Verify the cuda file path if path is specified in cuda.json
              ansible.builtin.stat:
                path: "{{ cuda_config.cuda.cluster[0].path }}"
              register: cuda_file_stat_result

            - name: Fail if cuda file path not exists
              ansible.builtin.fail:
                msg: "{{ cuda_file_path_missing_msg }}"
              when: not cuda_file_stat_result.stat.exists

        - name: Verify the cuda url is provided and path is empty
          when:
            - cuda_input_url_status
            - not cuda_input_path_status
          block:
            - name: Extract cuda version
              ansible.builtin.set_fact:
                cuda_version: "{{ software_config.softwares | selectattr('name', 'equalto', 'cuda') | map(attribute='version') | first }}"

            - name: Check reachability of cuda url
              ansible.builtin.uri:
                url: "{{ cuda_config.cuda.cluster[0].url }}"
              register: cuda_url_status
              until: cuda_url_status is not failed
              retries: "{{ max_retries }}"
              failed_when: false

            - name: Verify cuda version present in url
              ansible.builtin.assert:
                that:
                  - cuda_version in cuda_config.cuda.cluster[0].url
                  - cuda_url_status.status == url_success_return_code
                fail_msg: "{{ cuda_version_missing_msg }}"

- name: Check OFED json status
  when: ofed_input_status
  block:
    - name: Check that the software_config.json exists
      ansible.builtin.stat:
        path: "{{ ofed_json_file }}"
      register: ofed_stat_result

    - name: Fail if ofed.json file doesn't exist
      ansible.builtin.fail:
        msg: "{{ fail_msg_ofed_json_file }}"
      when: not ofed_stat_result.stat.exists

    - name: Validate ofed.json
      when: ofed_stat_result.stat.exists
      block:
        - name: Load ofed.json
          ansible.builtin.include_vars:
            file: "{{ ofed_json_file }}"
            name: ofed_config

        - name: Set ofed_input_url_status
          ansible.builtin.set_fact:
            ofed_input_url_status: true
          when:
            - ofed_config.ofed.cluster[0].url is defined
            - ofed_config.ofed.cluster[0].url | trim | length > 1

        - name: Set ofed_input_path_status
          ansible.builtin.set_fact:
            ofed_input_path_status: true
          when:
            - ofed_config.ofed.cluster[0].path is defined
            - ofed_config.ofed.cluster[0].path | trim | length > 1

        - name: Check if url or path is defined in cluster variable
          ansible.builtin.set_fact:
            ofed_config_status: true
          when: ofed_input_url_status or ofed_input_path_status

        - name: Fail if neither url nor path is not provided for ofed.json file
          ansible.builtin.fail:
            msg: "{{ fail_msg_ofed_config }}"
          when: not ofed_config_status

        - name: Verify the ofed file path provided
          when: ofed_input_path_status
          block:
            - name: Verify the OFED file path if path is specified in ofed.json
              ansible.builtin.stat:
                path: "{{ ofed_config.ofed.cluster[0].path }}"
              register: ofed_file_stat_result

            - name: Fail if OFED file path not exists
              ansible.builtin.fail:
                msg: "{{ ofed_file_path_missing_msg }}"
              when: not ofed_file_stat_result.stat.exists

        - name: Verify the OFED url is provided and path is empty
          when:
            - ofed_input_url_status
            - not ofed_input_path_status
          block:
            - name: Extract OFED version
              ansible.builtin.set_fact:
                ofed_version: "{{ software_config.softwares | selectattr('name', 'equalto', 'ofed') | map(attribute='version') | first }}"

            - name: Check reachability of ofed url
              ansible.builtin.uri:
                url: "{{ ofed_config.ofed.cluster[0].url }}"
              register: ofed_url_status
              until: ofed_url_status is not failed
              retries: "{{ max_retries }}"
              failed_when: false

            - name: Verify OFED version present in url
              ansible.builtin.assert:
                that:
                  - ofed_version in ofed_config.ofed.cluster[0].url
                  - ofed_url_status.status == url_success_return_code
                fail_msg: "{{ ofed_version_missing_msg }}"
