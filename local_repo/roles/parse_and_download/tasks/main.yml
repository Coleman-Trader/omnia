# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Define Set facts
  ansible.builtin.set_fact:
    yaml_file_path: "{{ nfs_shared_path }}/input/default.yml"

- name: Read project_name from YAML file
  ansible.builtin.set_fact:
    project_name: "{{ (lookup('file', yaml_file_path) | from_yaml).project_name | default('Not Found', true) }}"

- name: Define project input path
  ansible.builtin.set_fact:
    project_input_path: "{{ nfs_shared_path }}/input/{{ project_name }}"


- name: Prepare package takslist
  ansible.builtin.include_tasks: create_tasklist.yml

- name : Process rpms
  ansible.builtin.include_tasks: process_rpm_repo.yml

- name: Run parallel tasks for each group
  ansible.builtin.include_tasks: execute_parallel_tasks.yml
  loop: "{{ result.software_dict | dict2items }}"
  loop_control:
    loop_var: item
  register: task_result

- name: Clear the rpm downloaded files
  ansible.builtin.file:
    path: "{{ repo_store_path }}/cluster/{{ cluster_os_type }}/{{ cluster_os_version }}/rpm }}"
    state: absent
  when: clean_rpms

- name: Create metadata file
  ansible.builtin.include_tasks: create_metadata.yml

- name: Print overall softwares status 
  ansible.builtin.debug:
    msg:
      - "   Name    | Status"
      - "--------------------"
      - "{{ overall_status_dict | dict2items | map(attribute='key') | zip(overall_status_dict | dict2items | map(attribute='value')) | map('join', '  |  ') | list }}"

- name: Determine final repository status
  ansible.builtin.set_fact:
    final_status: "{{ 'SUCCESS' if 'FAILURE' not in overall_status_dict.values() and 'TIMEOUT' not in overall_status_dict.values() and 'PARTIAL' not in overall_status_dict.values() else 'FAILED' }}"

- name: Local repository status
  ansible.builtin.debug:
    msg: "{{ 'localrepository SUCCESS' if final_status == 'SUCCESS' else 'localrepository failed. because some of the packages status are FAILED' }}"
  failed_when: final_status != 'SUCCESS'
