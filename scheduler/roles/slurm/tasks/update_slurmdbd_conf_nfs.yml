#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

# - name: Install mariadb
#   ansible.builtin.shell: dnf install -y --installroot={{ installroot }} mariadb-server # noqa: command-instead-of-shell
#   changed_when: false
#   failed_when: false

- name: Install db
  ansible.builtin.dnf:
    name: mariadb-server
    # installroot: "{{ installroot }}"
  when: ansible_os_family == 'RedHat'

- name: Start mariadb
  ansible.builtin.systemd:
    name: mariadb
    state: restarted
    enabled: true

- name: Grant permissions for slurm db
  ansible.builtin.command: >-
    mysql -u root -e "GRANT ALL ON slurm_acct_db.* TO '{{ slurm_db_username }}'@'localhost' identified by '{{ slurm_db_password }}'with grant option;"
  changed_when: true

- name: Create files - {{ item }} # TODO: file required?
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    owner: "{{ slurm_user }}"
    group: "{{ slurm_user_group }}"
    mode: "{{ slurm_mode }}"
  loop:
    - "{{ slurm_dbd_conf_dict['LogFile'] }}"
    - "{{ slurm_dbd_conf_dict['PidFile'] }}"

# Port Config
- name: Enable SlurmdbdPort
  ansible.posix.firewalld:
    port: "{{ slurm_dbd_port }}/tcp"
    permanent: true
    state: enabled
    immediate: true

- name: Create slurmdbd.conf
  ansible.builtin.template:
    src: "dbd.conf.j2"
    dest: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurmdbd.conf"
    owner: "{{ slurm_user }}"
    group: "{{ slurm_user }}"
    mode: "{{ slurm_dbd_mode }}"
  run_once: true
  notify:
    - Restart slurmctld
    - Restart slurmdbd

- name: Create directory for symbolic link
  ansible.builtin.file:
    path: "/etc"
    state: directory
    mode: "0755"

- name: Create directory for symbolic link
  ansible.builtin.file:
    path: "/etc/slurm"
    state: directory
    mode: "0755"

- name: Create symbolic link for slurmdbd.conf
  ansible.builtin.file:
    src: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurmdbd.conf"
    dest: "/etc/slurm/slurmdbd.conf"
    state: link
    force: true

# Edit service
- name: Enable the service
  ansible.builtin.service:
    name: slurmdbd
    enabled: true
  register: dbd_service

- name: Add environment for nfs case above Execstart
  ansible.builtin.lineinfile:
    path: "{{ dbd_service['status']['FragmentPath'] | default(slurmdbd_service_default_path) }}"
    insertbefore: '^ExecStart='
    line: 'Environment="LD_LIBRARY_PATH={{ slurm_share_prefix }}/usr/lib64/"'
    owner: "{{ root_user }}"
    group: "{{ root_group }}"
    mode: "{{ conf_file_mode }}"
  when: (slurm_installation_type == 'nfs_share') and _force_install_nfs
  notify:
    - Reload slurmdbd
    - Restart slurmdbd

- name: Remove environment for configless case
  community.general.ini_file:
    path: "{{ dbd_service['status']['FragmentPath'] | default(slurmdbd_service_default_path) }}"
    section: Service
    option: Environment
    state: absent
  when: (slurm_installation_type == 'configless') or not _force_install_nfs
  notify:
    - Reload slurmdbd
    - Restart slurmdbd

# - name: Change ownership of slurmdbd.conf
#   ansible.builtin.file:
#     path: "{{ default_slurmdbd_path }}"
#     owner: slurm
#     group: slurm
#     state: file

# - name: Set permissions for slurmdbd.conf
#   ansible.builtin.file:
#     path: "{{ default_slurmdbd_path }}"
#     mode: "{{ slurmdbd_mode }}"
#     state: file
