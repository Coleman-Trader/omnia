---
- name: Append share path if NFS
  ansible.builtin.set_fact:
    slurm_share_prefix: "{{ share_path }}/{{ slurm_dir_name }}"

- name: Check if line exists
  ansible.builtin.lineinfile:
    path: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
    state: absent
    line: "NodeName={{ item }}"
    regexp: "^NodeName={{ item }} "
  register: node_check
  check_mode: true
  loop: "{{ groups['slurm_node'] }}"

- name: Insert Node
  ansible.builtin.lineinfile:
    path: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
    state: present
    line: "NodeName={{ hostvars[item.item]['inventory_hostname_short'] }} CPUs={{ hostvars[item.item]['ansible_facts']['processor_nproc'] }} Sockets={{ hostvars[item.item]['ansible_facts']['processor_count'] }} CoresPerSocket={{ hostvars[item.item]['ansible_facts']['processor_cores'] }} ThreadsPerCore={{ hostvars[item.item]['ansible_facts']['processor_threads_per_core'] }}"
    insertafter: "^NodeName="
  register: node_check
  when: not item.changed
  loop: "{{ node_check.results }}"

- name: Get slurm info output if slurm is installed
  ansible.builtin.shell: scontrol show node | awk '/NodeName/ {print $1}' | cut -d= -f2
  register: slurm_nodes

- name: Assemble all slurm_nodes
  ansible.builtin.set_fact:
    all_nodes: "{{ (groups['slurm_node'] + slurm_nodes['stdout_lines']) | unique | sort }}"

- name: Add the partition
  ansible.builtin.lineinfile:
    path: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
    state: present
    line: "PartitionName={{ slurm_partition_name }} Nodes={{ all_nodes | join(',') }} MaxTime=INFINITE State=UP"
    regexp: "^PartitionName={{ slurm_partition_name }} "
  register: partition_check

