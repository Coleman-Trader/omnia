---
- name: Append share path if NFS
  ansible.builtin.set_fact:
    slurm_share_prefix: "{{ share_path }}/{{ slurm_dir_name }}"

- name: Ensure directories - {{ item }}
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "{{ common_mode }}"
  loop:
    - "{{ slurm_share_prefix }}{{ slurm_config_dir }}"

- name: Ensure directories - {{ item }}
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ slurm_user }}"
    group: "{{ slurm_user_group }}"
    mode: "{{ common_mode }}"
  loop:
    - "{{ slurm_conf_dict['StateSaveLocation'] }}"
    - "{{ slurm_config_dir }}"

- name: Is db_host defined
  ansible.builtin.set_fact:
    db_host: "{{ groups['slurm_dbd'][0] }}"
  when: db_host is not defined and '"slurm_node" in group_names'

- name: Is db_port defined
  ansible.builtin.set_fact:
    db_port: "{{ db_port_default }}"
  when: db_port is not defined and '"slurm_node" in group_names'

- name: Set db_host
  ansible.builtin.set_fact:
    db_host: "{{ groups['slurm_dbd'][0] }}"
  when: db_host == None or db_host == "" and '"slurm_node" in group_names'

- name: Set db_port
  ansible.builtin.set_fact:
    db_port: "{{ db_port_default }}"
  when: db_port == None and '"slurm_node" in group_names'

# TODO: Can't use run_once and when condition on same task,
# maybe should move to seperate file with a when condtion for inlcude task
- name: Create slurmdbd.conf
  ansible.builtin.template: # Create dest directory before
    src: "dbd.conf.j2"
    dest: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurmdbd.conf"
    owner: "{{ slurm_user }}"
    group: "{{ slurm_user }}"
    mode: "{{ slurm_dbd_mode }}"
  # run_once: true
  when: '"slurm_dbd" in group_names'
  notify:
    - Restart slurmctld
    - Restart slurmdbd
    - Restart slurmd

- name: Create slurm.conf
  ansible.builtin.template: # Create dest directory before
    src: "slurm.conf.j2"
    dest: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
    # owner: root
    # group: root
    mode: "{{ conf_file_mode }}"
  run_once: true
  notify:
    - Restart slurmctld

- name: Create cgroup.conf
  ansible.builtin.template: # Create dest directory before
    src: "cgroup.conf.j2"
    dest: "{{ item }}"
    owner: root
    group: root
    mode: "{{ conf_file_mode }}"
  loop:
    - "{{ slurm_share_prefix }}{{ slurm_config_dir }}/cgroup.conf"
    - "{{ slurm_config_dir }}/cgroup.conf"
  notify:
    - Restart slurmctld
    - Restart slurmdbd

# Environment Var SLURM_CONF
- name: Set env variable
  community.general.ini_file:
    path: "/etc/environment"
    option: SLURM_CONF
    value: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/slurm.conf"
    no_extra_spaces: true
    mode: u=rw,g=r,o=r

- name: Local copy slurmdbd.conf /etc/slurm/conf # parallel writes
  ansible.builtin.template: # Local copy #FAILSAFE
    src: "dbd.conf.j2"
    dest: "{{ slurm_config_dir }}/slurmdbd.conf"
    owner: "{{ slurm_user }}"
    group: "{{ slurm_user }}"
    mode: "{{ slurm_dbd_mode }}"
  ignore_errors: true
  notify:
    - Restart slurmctld
    - Restart slurmdbd

- name: All other host configs # TODO: failsafe
  ansible.builtin.template:
    src: "all_other.conf.j2"
    dest: "{{ slurm_share_prefix }}{{ slurm_config_dir }}/{{ item }}.conf"
    mode: "{{ conf_file_mode }}"
    backup: true
  loop:
    - mpi
    - acct_gather
    - gres
  when: item in vars
  notify:
    - Reload slurmctld
    - Reload slurmd

- name: Local copy slurm.conf /etc/slurm/conf # parallel writes
  ansible.builtin.template: # Local copy # FAILSAFE
    src: "{{ item }}.conf.j2"
    dest: "{{ slurm_config_dir }}/{{ item }}.conf"
    owner: root
    group: root
    mode: "{{ conf_file_mode }}"
  ignore_errors: true
  register: ignore_errors_register
  loop:
    - slurm
    - cgroup
  notify:
    - Restart slurmctld

- name: All other host local configs # FAILSAFE
  ansible.builtin.template:
    src: "all_other.conf.j2"
    dest: "{{ slurm_config_dir }}/{{ item }}.conf"
    mode: "{{ conf_file_mode }}"
    backup: true
  ignore_errors: true
  register: ignore_errors_register
  loop:
    - mpi
    - acct_gather
    - gres
  when: item in vars
  notify:
    - Reload slurmctld
    - Reload slurmd
