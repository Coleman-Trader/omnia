#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Saving distribution of os
  ansible.builtin.set_fact:
    compute_os: "{{ ansible_facts['distribution'] | lower }}"

- name: Validate share_path is NFS
  ansible.builtin.include_tasks: validate_share_path.yml
  when: (slurm_support is true and slurm_installation_type == 'nfs_share') or
        ucx_support is true or
        openmpi_support is true

- name: Prepare RHEL and Rocky nodes
  ansible.builtin.include_tasks: prepare_rhel_nodes.yml
  when:
    - os_supported_redhat in compute_os or
      os_supported_rocky in compute_os
    - slurm_support is true

- name: Install utils packages
  ansible.builtin.include_tasks: install_utils_packages.yml
  when:
    - utils_support is true

- name: Prepare hosts file
  ansible.builtin.include_tasks: prepare_hosts_file.yml
  when:
    - slurm_support is true

- name: Set fact for hostvars sharepath
  ansible.builtin.set_fact:
    hostvars_share_path: "{{ hostvars['127.0.0.1']['share_path'] }}{{ slurm_nfs_folder }}"

- name: Append share_path to variables when slurm_installation_type is nfs_share
  ansible.builtin.set_fact:
    slurm_dest: "{{ hostvars_share_path }}{{ slurm_dest }}"
    slurm_confpth: "{{ hostvars_share_path }}{{ slurm_confpth }}"
    slurm_logpth: "{{ hostvars_share_path }}{{ slurm_logpth }}"
    spool_pth: "{{ hostvars_share_path }}{{ spool_pth }}%n"
    spool_dir: "{{ hostvars_share_path }}{{ spool_dir }}"
    slurm_pidpth: "{{ hostvars_share_path }}{{ slurm_pidpth }}"
    slurmctld_pid: "{{ hostvars_share_path }}{{ slurmctld_pid }}"
    slurmd_pid: "{{ hostvars_share_path }}{{ slurmd_pid }}"
    slurmctld_log: "{{ hostvars_share_path }}{{ slurmctld_log }}"
    spool_slurmctld_pth: "{{ hostvars_share_path }}{{ spool_slurmctld_pth }}"
    cluster_state_path: "{{ hostvars_share_path }}{{ cluster_state_path }}"
    slurmdbd_path: "{{ hostvars_share_path }}{{ slurmdbd_path }}"
    slurmd_log: "{{ hostvars_share_path }}{{ slurmd_log }}"
    spool_slurmd_pth: "{{ hostvars_share_path }}{{ spool_slurmd_pth }}"
    logfile: "{{ hostvars_share_path }}{{ logfile }}"
    pidfile: "{{ hostvars_share_path }}{{ pidfile }}"
    slurmd_path: "{{ hostvars_share_path }}{{ slurmd_path }}"
    plugin_slurm_dir: "{{ hostvars_share_path }}{{ plugin_slurm_dir }}"
    slurm_nfs_folder: "{{ hostvars_share_path }}"
    slurm_var_folder: "{{ hostvars_share_path }}{{ var_dir }}"
  when: slurm_installation_type == 'nfs_share'

- name: Append share_path to variables when slurm_installation_type is configless
  ansible.builtin.set_fact:
    slurm_dest: "{{ slurm_dest }}"
    slurm_confpth: "{{ slurm_confpth }}"
    slurm_logpth: "{{ slurm_logpth }}"
    spool_pth: "{{ spool_pth }}"
    spool_dir: "{{ spool_dir }}"
    slurm_pidpth: "{{ slurm_pidpth }}"
    slurmctld_pid: "{{ slurmctld_pid }}"
    slurmd_pid: "{{ slurmd_pid }}"
    slurmctld_log: "{{ slurmctld_log }}"
    spool_slurmctld_pth: "{{ spool_slurmctld_pth }}"
    cluster_state_path: "{{ cluster_state_path }}"
    slurmdbd_path: "{{ slurmdbd_path }}"
    slurmd_log: "{{ slurmd_log }}"
    spool_slurmd_pth: "{{ spool_slurmd_pth }}"
    logfile: "{{ logfile }}"
    pidfile: "{{ pidfile }}"
    slurmd_path: "{{ slurmd_path }}"
  when: slurm_installation_type == 'configless'

- name: Add nfs_share and configless installation type variables
  ansible.builtin.set_fact:
    nfs_share_slurm: "{{ nfs_share_slurm }}"
    configless_slurm: "{{ configless_slurm }}"

- name: Initialize slurmctld service status
  ansible.builtin.set_fact:
    slurmctld_status: false
    slurmd_status: false

- name: Tasks for slurm_manager role
  when: hostvars['127.0.0.1']['slurm_support']
  block:
    - name: Fetch the service facts
      ansible.builtin.service_facts:

    - name: Check the status of slurmctld
      ansible.builtin.set_fact:
        slurmctld_status: true
      when:
        - "'slurmctld.service' in ansible_facts.services"
        - "ansible_facts.services['slurmctld.service'].state == 'running'"

    - name: Check the status of slurmd
      ansible.builtin.set_fact:
        slurmd_status: true
      when:
        - "'slurmd.service' in ansible_facts.services"
        - "ansible_facts.services['slurmd.service'].state == 'running'"

    - name: Initialize the slurm node params
      ansible.builtin.set_fact:
        node_fqdn: "None"
        sockets: "0"
        cores: "0"

- name: Tasks for slurm_common role
  when:
    - hostvars['127.0.0.1']['slurm_support']
  block:
    - name: Install common Python packages
      ansible.builtin.include_tasks: install_python_packages.yml

    - name: Install common packages
      ansible.builtin.include_tasks: install_common_packages.yml

    - name: Install common packages for slurm on NFS
      ansible.builtin.include_tasks: install_packages_nfs.yml
      when: slurm_installation_type == nfs_share_slurm

    - name: Install common packages for configless
      ansible.builtin.include_tasks: install_packages.yml
      when: slurm_installation_type ==  configless_slurm

    - name: Update slurm group and permissions
      ansible.builtin.include_tasks: update_log_files.yml

    - name: Gather slurm node parameters
      ansible.builtin.set_fact:
        node_fqdn: "{{ hostvars[inventory_hostname]['ansible_facts']['hostname'] }}.{{ hostvars[inventory_hostname]['ansible_facts']['domain'] }}"
        sockets: "{{ hostvars[inventory_hostname]['ansible_facts']['processor_count'] }}"
        cores: "{{ hostvars[inventory_hostname]['ansible_facts']['processor_cores'] }}"
