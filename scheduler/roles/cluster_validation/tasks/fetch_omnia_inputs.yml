#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Include variable file omnia_config.yml
  block:
    - name: Include variable file omnia_config.yml
      ansible.builtin.include_vars: "{{ input_project_dir }}/{{ config_filename }}"
      register: include_omnia_config
      no_log: true
  rescue:
    - name: Failed to include omnia_config.yml
      ansible.builtin.fail:
        msg: "{{ omnia_config_syntax_fail_msg }} Error: {{ include_omnia_config.message }}"

- name: Validate input parameters are not empty
  ansible.builtin.fail:
    msg: " {{ slurm_installation_type_empty_failure_msg }}"
  register: input_config_check
  when:
    - slurm_installation_type | default("", true) | length < 1

- name: Validate input parameters are mentioned properly for slurm installation type
  ansible.builtin.fail:
    msg: " {{ slurm_installation_type_wrong_failure_msg }}"
  register: input_config_check
  when:
    - slurm_installation_type | default("", true) not in ["nfs_share", "configless"]

- name: Verify the value of restart_slurm_services
  ansible.builtin.assert:
    that:
      - restart_slurm_services == true or restart_slurm_services == false
    success_msg: "{{ restart_services_success_msg }}"
    fail_msg: "{{ restart_services_failure_msg }}"
  when: slurm_support

- name: Validate k8s_support variable
  when: k8s_support
  block:
    - name: Assert kubernetes cni
      ansible.builtin.assert:
        that:
          - k8s_cni | default("", true) | length > 1
          - "('calico' in k8s_cni) or ('flannel' in k8s_cni)"
        success_msg: "{{ success_msg_k8s_cni }}"
        fail_msg: "{{ fail_msg_k8s_cni }}"

    - name: Assert pod external IP range
      ansible.builtin.assert:
        that:
          - pod_external_ip_range | default("", true) | length > 9
          - ("'/' in pod_external_ip_range") or ("'-' in pod_external_ip_range")
        success_msg: "{{ success_msg_pod_external_ip_range }}"
        fail_msg: "{{ fail_msg_pod_external_ip_range }}"

    - name: Assert kubernetes service addresses
      ansible.builtin.assert:
        that:
          - k8s_service_addresses | default("", true) | length > 9
          - '"/" in k8s_service_addresses'
        success_msg: "{{ success_msg_k8s_service_addresses }}"
        fail_msg: "{{ fail_msg_k8s_service_addresses }}"

    - name: Assert kubernetes pod network CIDR
      ansible.builtin.assert:
        that:
          - k8s_pod_network_cidr | default("", true) | length > 9
          - '"/" in k8s_pod_network_cidr'
        success_msg: "{{ success_msg_k8s_pod_network_cidr }}"
        fail_msg: "{{ fail_msg_k8s_pod_network_cidr }}"

    - name: Assert kubernetes topology manager policy
      ansible.builtin.assert:
        that:
          - topology_manager_policy | default("", true) | length > 1
          - "topology_manager_policy in supported_topology_manager_policy"
        success_msg: "{{ success_msg_k8s_toplogy_manager_policy }}"
        fail_msg: "{{ fail_msg_k8s_toplogy_manager_policy }}"

    - name: Assert kubernetes topology manager scope
      ansible.builtin.assert:
        that:
          - topology_manager_scope | default("", true) | length > 1
          - "topology_manager_scope in supported_topology_manager_scope"
        success_msg: "{{ success_msg_k8s_toplogy_manager_scope }}"
        fail_msg: "{{ fail_msg_k8s_toplogy_manager_scope }}"

- name: Initialize flag for csi powerscale driver installation
  ansible.builtin.set_fact:
    csi_driver_powerscale_precheck_pass: false

- name: Validate csi powerscale variables
  when: csi_driver_powerscale_support
  block:
    - name: Validate that csi_powerscale_driver_secret_file_path contains a valid path
      ansible.builtin.assert:
        that:
          - csi_powerscale_driver_secret_file_path is defined
          - csi_powerscale_driver_secret_file_path | length > 0
        success_msg: "{{ csi_driver_secret_file_path_success_msg }}"
        fail_msg: "{{ csi_driver_secret_file_path_fail_msg }}"

    - name: Validate that csi_powerscale_driver_values_file_path contains a valid path
      ansible.builtin.assert:
        that:
          - csi_powerscale_driver_values_file_path is defined
          - csi_powerscale_driver_values_file_path | length > 0
        success_msg: "{{ csi_driver_values_file_path_success_msg }}"
        fail_msg: "{{ csi_driver_values_file_path_fail_msg }}"

    - name: Validate user input for csi powerscale driver
      ansible.builtin.include_tasks: csi_powerscale_driver_input_validation.yml

    - name: Set flag for csi powerscale driver installation to true after assertion pass
      ansible.builtin.set_fact:
        csi_driver_powerscale_precheck_pass: true

- name: Save input variables from file
  ansible.builtin.set_fact:
    k8s_cni: "{{ k8s_cni }}"
    slurm_installation_type: "{{ slurm_installation_type }}"
