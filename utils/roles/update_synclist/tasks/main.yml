#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Get node names from inventory
  ansible.builtin.command: |
    {{ ansible_python_interpreter }} {{ get_nodes_python_script }} {{ db_path }} {{ ansible_inventory_sources | quote }}
  changed_when: false
  register: node_names
  no_log: false

- name: Update synclist on node - {{ node_name_list }}
  when: node_names.stdout | select('string') | list | length > 0
  block:
    - name: User confirmation for synclist
      ansible.builtin.include_tasks: user_confirmation.yml

    - name: Parse node names into a list
      ansible.builtin.set_fact:
        node_name_list: "{{ node_names.stdout.split(',') | map('trim') | list }}"

    - name: Update synclist on each node
      ansible.builtin.command:
        cmd: "/opt/xcat/bin/updatenode {{ item }} -F"
      loop: "{{ node_name_list }}"
      changed_when: true
      register: updatenode_result
      failed_when: false
      when: item | length > 0  # Ensure item is not empty

    - name: Initialize success and failure lists
      ansible.builtin.set_fact:
        success_nodes: []
        failed_nodes: []

    - name: Collect success nodes
      ansible.builtin.set_fact:
        success_nodes: "{{ success_nodes + [item.item] }}"
      when: '"failed" not in item.stdout and item.rc == 0'
      loop: "{{ updatenode_result.results }}"

    - name: Collect failed nodes and errors
      ansible.builtin.set_fact:
        failed_nodes: "{{ failed_nodes + [item.item] }}"
      when: '"failed" in item.stdout or item.rc != 0'
      loop: "{{ updatenode_result.results }}"

    - name: Change node status to booted
      ansible.builtin.command:
        cmd: "/opt/xcat/bin/chdef {{ item }} status=booted"
      loop: "{{ success_nodes }}"
      changed_when: true
      when: item | length > 0

    - name: Update omniadb node status to booted for success nodes
      ansible.builtin.command: |
        {{ ansible_python_interpreter }} {{ update_dp_python_script }} {{ db_path }} {{ item }}
      loop: "{{ success_nodes }}"
      changed_when: true
      no_log: false
      when: item | length > 0

    - name: Display success results
      ansible.builtin.debug:
        msg: "Update synclist success on nodes: {{ success_nodes | join(', ') }}"
      when: success_nodes | length > 0

    - name: Display failure results
      ansible.builtin.debug:
        msg: "Update synclist failed on nodes: {{ failed_nodes }}"
      when: failed_nodes | length > 0

- name: No nodes need updating synclist
  ansible.builtin.debug:
    msg: "No nodes from inventory need updating synclist."
  when: node_names.stdout | length == 0
